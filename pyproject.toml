[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "neuralforge"
version = "1.0.0"
description = "Professional AI & Automation Toolkit for Apple Silicon"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Eduardo Giovannini", email = "eduardo@giovannini.us"}
]
maintainers = [
    {name = "Eduardo Giovannini", email = "eduardo@giovannini.us"}
]
keywords = [
    "ai", "automation", "apple-silicon", "neural-engine", "core-ml", 
    "postgresql", "machine-learning", "macos", "m3", "local-ai"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.9"
dependencies = [
    "rich>=13.0.0",
    "psycopg2-binary>=2.9.0",
    "psutil>=5.9.0",
    "requests>=2.28.0",
    "beautifulsoup4>=4.11.0",
    "lxml>=4.9.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.optional-dependencies]
gui = [
    "wxPython>=4.2.0",
    "PyQt5>=5.15.0",
]
ml = [
    "torch>=2.0.0",
    "coremltools>=7.0.0",
    "sentence-transformers>=2.2.0",
]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/neuralforge"
Documentation = "https://github.com/yourusername/neuralforge/wiki"
Repository = "https://github.com/yourusername/neuralforge.git"
Issues = "https://github.com/yourusername/neuralforge/issues"
Changelog = "https://github.com/yourusername/neuralforge/blob/main/CHANGELOG.md"

[project.scripts]
neuralforge = "src.neuralforge.launcher:main"
neural-monitor = "src.core.neural_check:main"
ai-memory = "src.ai.memory_buffer:main"
file-organizer = "src.core.folder_organizer:main"
document-tagger = "src.ai.document_tagger:main"
web-scraper = "src.web.gui_scraper:main"
coreml-converter = "src.core.coreml:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
neuralforge = ["config/*.json", "assets/*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "psycopg2.*",
    "wx.*",
    "PyQt5.*",
    "torch.*",
    "coremltools.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
